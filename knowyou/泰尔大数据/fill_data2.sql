set hive.exec.dynamic.partition.mode=nonstrict;
-------samplepoint-------------------------------------------------------------------------------------------------
INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220703'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220704'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220705'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220706'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220707'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220707' 
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220708'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220708'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220709'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220710'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;


INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220711'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220712'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;


INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220713'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220714'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;

INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220715'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;


INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220716'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;



INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220717'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;


INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220718'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;


INSERT overwrite TABLE knowyou_ott_ods.odm_tair_samplepoint_dm partition(dt,ht)
SELECT  
    a.deviceid,
    get_json_object(j.info,'$.groupId') AS group_id,
    get_json_object(j.info,'$.test_guid') AS test_guid,
    get_json_object(j.info,'$.testType') AS test_type,
    get_json_object(j.info,'$.scene_type') AS scene_type,
    get_json_object(j.info,'$.scene_name') AS scene_name,
    get_json_object(j.info,'$.scene_mark') AS scene_mark,
    get_json_object(j.info,'$.handset_time') AS handset_time,
    get_json_object(j.info,'$.operatorId') AS operator_id,
    get_json_object(j.info,'$.network_Class') AS network_class,
    get_json_object(j.info,'$.network_Type') AS network_type,
    get_json_object(j.info,'$.sp_type') AS sp_type,
    get_json_object(j.info,'$.app_dlrate') AS app_dlrate,
    get_json_object(j.info,'$.app_ulrate') AS app_ulrate,
    get_json_object(j.info,'$.ping_delay') AS ping_delay,
    get_json_object(j.info,'$.vmos') AS vmos,
    get_json_object(j.info,'$.cellName') AS cell_name,
    get_json_object(j.info,'$.cellDistance') AS cell_distance,
    get_json_object(j.info,'$.isInterference') AS is_interference,
    get_json_object(j.info,'$.isOverlap') AS is_overlap,
    get_json_object(j.info,'$.isNoMajorCell') AS is_no_major_cell,
    get_json_object(j.info,'$.isCrossCoverage') AS is_cross_coverage,
    get_json_object(j.info,'$.lte_tac') AS lte_tac,
    get_json_object(j.info,'$.lte_eci') AS lte_eci,
    get_json_object(j.info,'$.lte_earfcn') AS lte_earfcn,
    get_json_object(j.info,'$.lte_enodBID') AS lte_enod_bid,
    get_json_object(j.info,'$.lte_cellid') AS lte_cellid,
    get_json_object(j.info,'$.lte_pci') AS lte_pci,
    get_json_object(j.info,'$.lte_rsrp') AS lte_rsrp,
    get_json_object(j.info,'$.lte_sinr') AS lte_sinr,
    get_json_object(j.info,'$.lte_rsrq') AS lte_rsrq,
    get_json_object(j.info,'$.nr_type') AS nr_type,
    get_json_object(j.info,'$.nr_tac') AS nr_tac,
    get_json_object(j.info,'$.nr_eci') AS nr_eci,
    get_json_object(j.info,'$.nr_earfcn') AS nr_earfcn,
    get_json_object(j.info,'$.nr_enodBID') AS nr_enod_bid,
    get_json_object(j.info,'$.nr_cellid') AS nr_cellid,
    get_json_object(j.info,'$.nr_pci') AS nr_pci,
    get_json_object(j.info,'$.nr_rsrp') AS nr_rsrp,
    get_json_object(j.info,'$.nr_sinr') AS nr_sinr,
    get_json_object(j.info,'$.nr_rsrq') AS nr_rsrq,
    get_json_object(j.info,'$.wifi_manufacturer') AS wifi_manufacturer,
    get_json_object(j.info,'$.wifi_name') AS wifi_name,
    get_json_object(j.info,'$.wifi_mac') AS wifi_mac,
    get_json_object(j.info,'$.wifi_freq') AS wifi_freq,
    get_json_object(j.info,'$.wifi_strenth') AS wifi_strenth,
    get_json_object(j.info,'$.wifi_operatorId') AS wifi_operator_id,
    get_json_object(j.info,'$.latitude') AS latitude,
    get_json_object(j.info,'$.longitude') AS longitude,
    get_json_object(j.info,'$.grid_id') AS grid_id,
    get_json_object(j.info,'$.grid_length') AS grid_length,
    get_json_object(j.info,'$.province') AS province,
    get_json_object(j.info,'$.city') AS city,
    get_json_object(j.info,'$.district') AS district,
    a.msgtype,
    a.process_time,
    a.reportdate,
    a.dt,a.ht
FROM
(
    SELECT  
        deviceid, 
        sampling_point_list, 
        msgtype, 
        process_time, 
        reportdate, 
        dt,ht
    FROM knowyou_ott_ods.odm_tair_info_tmp
    WHERE dt = '20220719'  
    AND length(sampling_point_list) > 2
)a
lateral view explode(split(regexp_replace(regexp_replace(a.sampling_point_list,'\\[|\\]',''),'\\}\\,\\{','\\}\\;\\{'),'\\;')) j as info;


INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220702' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220703' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220704' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220705' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220706' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220707' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220708' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220709' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220709' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220710' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220711' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220712' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220713' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220714' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220715' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220716' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220717' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220718' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220719' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht;

INSERT overwrite TABLE knowyou_ott_ods.dws_tair_grid_dm partition(dt,ht)
SELECT  deviceid,group_id,operator_id,network_class,nr_type,grid_id,
        max(grid_length) as grid_length,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_lefttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5),4) as grid_lefttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5),4) as grid_leftdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_leftdown_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_righttop_x,
        round((split(grid_id,'-')[1]*0.0005 +3.5000),4) as grid_righttop_y,
        round((split(grid_id,'-')[0]*0.0005 +73.5005),4) as grid_rightdown_x,
        round((split(grid_id,'-')[1]*0.0005 +3.4995),4) as grid_rightdown_y,
        province,
        city,
        max(district) as district,
        scientific_trans(sum((case when app_dlrate=-10000 then 0 else app_dlrate end))) as app_dlrate_tv,
        sum((case when app_dlrate=-10000 then 0 else 1 end)) as app_dlrate_tc,
        scientific_trans(sum((case when app_ulrate=-10000 then 0 else app_ulrate end))) as app_ulrate_tv,
        sum((case when app_ulrate=-10000 then 0 else 1 end) ) as app_ulrate_tc,
        scientific_trans(sum((case when ping_delay=-10000 then 0 else ping_delay end))) as ping_delay_tv,
        sum((case when ping_delay=-10000 then 0 else 1 end) ) as ping_delay_tc,
        scientific_trans(sum((case when vmos=-10000 then 0 else vmos end))) as vmos_tv,
        sum((case when vmos=-10000 then 0 else 1 end) ) as vmos_tc,
        sum((case when is_interference=-10000 then 0 else 1 end) ) as is_interference,
        sum((case when is_overlap=-10000 then 0 else 1 end) ) as is_overlap,
        sum((case when is_no_major_cell=-10000 then 0 else 1 end) ) as is_no_major_cell,
        sum((case when is_cross_coverage=-10000 then 0 else 1 end) ) as is_cross_coverage,
        scientific_trans(sum((case when lte_rsrp=-10000 then 0 else lte_rsrp end))) as lte_rsrp_tv,
        sum((case when lte_rsrp=-10000 then 0 else 1 end) ) as lte_rsrp_tc,
        scientific_trans(sum((case when lte_sinr=-10000 then 0 else lte_sinr end))) as lte_sinr_tv,
        sum((case when lte_sinr=-10000 then 0 else 1 end) ) as lte_sinr_tc,
        scientific_trans(sum((case when lte_rsrq=-10000 then 0 else lte_rsrq end))) as lte_rsrq_tv,
        sum((case when lte_rsrq=-10000 then 0 else 1 end) ) as lte_rsrq_tc,
        scientific_trans(sum((case when nr_rsrp=-10000 then 0 else nr_rsrp end))) as nr_rsrp_tv,
        sum((case when nr_rsrp=-10000 then 0 else 1 end) ) as nr_rsrp_tc,
        scientific_trans(sum((case when nr_sinr=-10000 then 0 else nr_sinr end))) as nr_sinr_tv,
        sum((case when nr_sinr=-10000 then 0 else 1 end) ) as nr_sinr_tc,
        scientific_trans(sum((case when nr_rsrq=-10000 then 0 else nr_rsrq end))) as nr_rsrq_tv,
        sum((case when nr_rsrq=-10000 then 0 else 1 end) ) as nr_rsrq_tc,
        scientific_trans(sum((case when wifi_strenth=-10000 then 0 else wifi_strenth end))) as wifi_strenth_tv,
        sum((case when wifi_strenth=-10000 then 0 else 1 end) ) as wifi_strenth_tc,
        htime,
        dt, 
        ht
FROM(
SELECT *,date_format(handset_time,'yyyy-MM-dd HH:00:00') as htime FROM knowyou_ott_ods.odm_tair_samplepoint_dm
where dt='20220701' 
)a
group by deviceid,group_id,operator_id,network_class,nr_type,grid_id,province,city,htime,dt,ht